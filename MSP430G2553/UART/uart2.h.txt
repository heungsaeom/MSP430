int strlen(char * string){
	unsigned int i = 0;
	while( i < 128 && string[i] != '\0' ) i ++ ;
	return (i < 128)? i : -1 ;
}
void uart_config(void) 
{     
        P1SEL |= BIT1 | BIT2 ;
	P1SEL2 |= BIT1 | BIT2 ;
	UCA0CTL1 |= UCSSEL_2 ;
	UCA0BR0 = 139 ;
	UCA0BR1 = 0 ;
	UCA0MCTL = UCBRS1 + UCBRS2;
	UCA0CTL1 &= ~UCSWRST ;
	IE2 &= ~UCA0RXIE ;
}
//Gui 1 byte UART
  void uart_send_char(unsigned char val){
	 while (!(IFG2&UCA0TXIFG));
            UCA0TXBUF = val;
}

//Gui 1 so kieu int
void uart_send_int(unsigned int n)
{
     unsigned char buffer[16];
     unsigned char i,j;

     if(n == 0) {
    	 uart_send_char('0');
          return;
     }

     for (i = 15; i > 0 && n > 0; i--) {
          buffer[i] = (n%10)+'0';
          n /= 10;
     }

     for(j = i+1; j <= 15; j++) {
    	 uart_send_char(buffer[j]);
     }
}
//Gui 1 String UART
  void uart_send_data(unsigned char * data, unsigned char length){
	unsigned int i ;
	for(i = 0 ; i < length ; i ++){
		uart_send_char(data[i]);	
	}	
}

//nHAN MOT KY TU TU UART 
unsigned char uart_getc()				//Waits for a valid char from the UART
{
  char rx_char;
	while(! (IFG2 & UCA0RXIFG));
        rx_char = UCA0RXBUF;//ACK rx_flag
    return rx_char;
}

// NHAN CHUOI STRING TU UART
char *uart_gets(void){
      char *str;
      char temp[80];
      int i=0;
       while(1){	
              temp[i]=uart_getc();
               if (temp[i] == 0x0A)		// C string moi chua ki tu NULL, con external string ko chua, chi dung ki tu dac biet de nhan biet end chuoi		
                   break;
                i++;
             }
      temp[i++]='\0'; 
      
      str=temp;			// Point to the next char space in the string
     
      return str;
}


#ifndef _I2C_SW_H_
#define _I2C_SW_H_
/*-----------------------------------------------------------------------------*/
#define I2C_PxSEL		P1SEL
#define I2C_PxSEL2		P1SEL2
#define I2C_PxDIR		P1DIR
#define I2C_PxOUT		P1OUT
#define I2C_PxIN		P1IN

#define SCL        		BIT6
#define SDA         	        BIT7

#define ACK 			0x00
#define NACK			0x01

#define TIME_DELAY              200     // 16,000,000 / 200 ~ 80kHz
#define I2C_DELAY() __delay_cycles(TIME_DELAY)
/*********************************/
unsigned char Read_SCL(void); // Set SCL as input and return current level of line, 0 or 1, nomal is 1 because pullup by res
unsigned char Read_SDA(void); // Set SDA as input and return current level of line, 0 or 1, nomal is 0 because pull by res

void Clear_SCL(void); // Actively drive SCL signal Low
void Clear_SDA(void); // Actively drive SDA signal Low

void I2C_Config(void);
void I2C_Start(void);
void I2C_Stop(void);

void I2C_Writebit(unsigned char bit);
unsigned char I2C_Readbit(void);

void I2C_WriteByte(unsigned char Data);
unsigned char I2C_ReadByte(void);

void I2C_WriteData(unsigned char *Data, unsigned char DevideAddr, unsigned char Register, unsigned char nLength);
void I2C_ReadData(unsigned char *Buff, unsigned char DevideAddr, unsigned char Register, unsigned char nLength);
/******************************************/
unsigned char Read_SCL(void)
{
	I2C_PxDIR  &= ~SCL;
	return((I2C_PxIN & SCL) != 0);

}
unsigned char Read_SDA(void)
{
	I2C_PxDIR  &= ~SDA;
	return((I2C_PxIN & SDA) != 0);
}
void Clear_SCL(void)
{
	I2C_PxDIR  |= SCL;
}
void Clear_SDA(void)
{
	I2C_PxDIR  |= SDA;
}
void I2C_Config(void)
{
	// Conffig SCL and SDA as GPIO
  	I2C_PxSEL   &= ~(SCL + SDA);
	I2C_PxSEL2  &= ~(SCL + SDA);
	// Set SCL and SDA is logic HIGH
	I2C_PxDIR   &= ~(SCL + SDA);
	I2C_PxOUT   &= ~(SCL + SDA);
}
void I2C_Start(void)
{
	Read_SDA();				//set SDA to 1
	I2C_DELAY();
	Clear_SDA();			//set SDA to 0, currently SCL is 1
	I2C_DELAY();
	Clear_SCL();			//set SCL to 0
}
void I2C_Stop(void)
{
	Clear_SDA();			//set SDA to 0
	I2C_DELAY();
	Read_SCL();				//set SCL to 1
	I2C_DELAY();
	Read_SDA();				//set SDA to 1
}
void I2C_Writebit(unsigned char bit)
{
	if(bit)
	  Read_SDA();
	else
	  Clear_SDA();
	I2C_DELAY();
	Read_SCL();
	I2C_DELAY();
	Clear_SCL();
}
unsigned char I2C_Readbit(void)
{
	unsigned char bit;
	//Let the slave driver data
	Read_SDA();
	I2C_DELAY();
	Read_SCL();
	bit = Read_SDA();
	I2C_DELAY();
	Clear_SCL();
	return bit;
}
void I2C_WriteByte(unsigned char Data)
{
  	unsigned char nBit;

	for(nBit = 0; nBit < 8; nBit++)
	{
		I2C_Writebit((Data & 0x80) != 0);
		Data <<= 1;
	}
	I2C_Readbit(); // Waite ACK
}
unsigned char I2C_ReadByte(void)
{
	unsigned char Buff = 0;
	unsigned char nBit;
	
	for(nBit = 0; nBit < 8; nBit++)
	{
		Buff = (Buff << 1) | I2C_Readbit();
	}
	return Buff;
}
void I2C_WriteData(unsigned char *Data, unsigned char DevideAddr, unsigned char Register, unsigned char nLength)
{
	unsigned char nIndex;
  	I2C_Start();
	I2C_WriteByte(DevideAddr << 1);  // byDeviceAddr is 7 bit and command is write
	I2C_WriteByte(Register);
	for(nIndex = 0; nIndex < nLength; nIndex++)
	{
		I2C_WriteByte(*(Data + nIndex));
	}
	I2C_Readbit();
	I2C_Stop();
}

void I2C_ReadData(unsigned char *Buff, unsigned char DevideAddr, unsigned char Register, unsigned char nLength)
{
	unsigned char nIndex;
  	I2C_Start();
	I2C_WriteByte(DevideAddr << 1);
	I2C_WriteByte(Register);
	I2C_Stop();
	__no_operation(); 								// Short delay
	I2C_Start();
	__no_operation();									// Short delay
	I2C_WriteByte((DevideAddr << 1) | 1);
	for(nIndex = 0; nIndex < nLength; nIndex++)
	{
		*(Buff + nIndex) = I2C_ReadByte();
		if(nIndex > 0)I2C_Writebit(ACK);
	}
	I2C_Writebit(NACK);
	I2C_Stop();
}
#endif // _I2C_SW_H_